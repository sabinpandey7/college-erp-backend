generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @db.UnsignedInt
  createdAt        DateTime             @default(now())
  name             String
  role             Role                 @default(STUDENT)
  branch           Branch               @default(CSE)
  department       String
  password         String
  isAdmin          Boolean              @default(false)
  batch            Int?
  father           String?
  address          String?
  nationality      String               @default("INDIAN")
  Post             Post[]
  Lecture          Lecture[]
  Lecture_Students Lecture_Students[]
  MembersOfChat    MembersOfChat[]
  Message          Message[]
  Attendence       Attendence[]
  assignment       AssignmentAssignTo[]
  schedules        Schedule[]
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String?
  image       String?
  author_id   Int      @db.UnsignedInt
  author      User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model Subject {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  title     String
  Lecture   Lecture[]
  schedules Schedule[]
}

model Lecture {
  id               Int                @id @default(autoincrement())
  sem              Int
  branch           Branch
  subject_id       Int
  session          Int
  teacher_id       Int?               @db.UnsignedInt
  teacher          User?              @relation(fields: [teacher_id], references: [id], onDelete: SetNull)
  subject          Subject            @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  Lecture_Students Lecture_Students[]
  Period           Period[]
  Assignment       Assignment[]
}

model Lecture_Students {
  id         Int     @id @default(autoincrement())
  lecture_id Int
  user_id    Int     @db.UnsignedInt
  lecture    Lecture @relation(fields: [lecture_id], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Period {
  id         Int          @id @default(autoincrement())
  lecture_id Int
  date       DateTime     @db.Date
  lecture    Lecture      @relation(fields: [lecture_id], references: [id], onDelete: Cascade)
  Attendence Attendence[]
}

model Attendence {
  periods_id Int
  user_id    Int    @db.UnsignedInt
  user       User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  periods    Period @relation(fields: [periods_id], references: [id], onDelete: Cascade)

  @@id([periods_id, user_id])
}

model Assignment {
  id         Int                  @id @default(autoincrement())
  lecture_id Int
  question   String
  lecture    Lecture              @relation(fields: [lecture_id], references: [id], onDelete: Cascade)
  assignTo   AssignmentAssignTo[]
}

model AssignmentAssignTo {
  assignment_id Int
  assignment    Assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  user_id       Int        @db.UnsignedInt
  status        Boolean    @default(false)
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([assignment_id, user_id])
}

model Chat {
  id       Int             @id @default(autoincrement())
  title    String
  Members  MembersOfChat[]
  messages Message[]
}

model MembersOfChat {
  id       Int     @id @default(autoincrement())
  chat_id  Int
  user_id  Int     @db.UnsignedInt
  is_admin Boolean @default(false)
  user     User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat     Chat    @relation(fields: [chat_id], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  chat_id   Int
  sender_id Int      @db.UnsignedInt
  date      DateTime @default(now())
  message   String
  sender    User     @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
}

model Routine {
  id        Int        @id @default(autoincrement())
  branch    Branch     @default(CSE)
  session   Int
  sem       Int
  batch     Int
  schedules Schedule[]
}

model Schedule {
  id         Int      @id @default(autoincrement())
  routine_id Int
  day        Week
  subject_id Int
  teacher_id Int?     @db.UnsignedInt
  start_time DateTime @db.Time
  end_time   DateTime @db.Time
  routine    Routine  @relation(fields: [routine_id], onDelete: Cascade, references: [id])
  subject    Subject  @relation(fields: [subject_id], onDelete: Cascade, references: [id])
  teacher    User?    @relation(fields: [teacher_id], onDelete: Cascade, references: [id])
}

enum Week {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

enum Role {
  STUDENT
  TEACHER
}

enum Branch {
  CSE
  ME
  CIVIL
  EEE
  ECE
}
